{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : "// Encode downlink data from incoming Rule Engine message\n\n// msg - JSON message payload downlink message json\n// msgType - type of message, for ex. 'ATTRIBUTES_UPDATED', 'POST_TELEMETRY_REQUEST', etc.\n// metadata - list of key-value pairs with additional data about the message\n// integrationMetadata - list of key-value pairs with additional data defined in Integration executing this converter\n\n/** Encoder **/\n\n  // Construct the downlink message\n    var data = {\n        downlinks: [{\n            f_port: 2,\n            confirmed: true,\n            frm_payload: btoa(msg.Valve1State),  // Encode the Valve1State as Base64\n            priority: \"NORMAL\"\n        }]\n    };\n\n    // Prepare the result object to return\n    var result = {\n\n        // Specify the content type of the downlink message\n        contentType: \"JSON\",\n\n        // The downlink data in JSON format\n        data: JSON.stringify(data),\n\n        // Optional metadata object in key/value format\n        metadata: {\n            devId: 'eui-70b3d57ed006996d',  // devId\n\n        }\n\n    };\n\n    // Return the result object\n    return result;",
      "tbelEncoder" : "// Define the instructionType as always \"09\" for valve control\n    var instructionType = \"09\";\n    \n    // Define variable to hold the valveState value\n    var valveState;\n\n    // Explicitly set the valveState based on Valve1State\n    if (msg.Valve1State === true) {\n        valveState = \"01\";  // Valve state open\n    } else {\n        valveState = \"00\";  // Valve state closed\n    }\n\n    // Construct the detailed downlink message\n    var detailedMessage = {\n        metadata: {\n            timestamp: new Date().toISOString(),  // Current timestamp\n            messageId: Math.floor(Math.random() * 100000)  // Random messageId\n        },\n        task: {\n            type: \"valveControl\",  // Task type is valve control\n            data: {\n                instructionType: instructionType,  // Fixed instructionType \"09\"\n                valveNumber: \"01\",  // Hardcoded valve number\n                valveState: valveState  // Use the explicitly set valveState\n            }\n        }\n    };\n\n    // Convert the detailed message to a JSON string\n    var jsonString = JSON.stringify(detailedMessage);\n\n    // Encode the JSON string to Base64\n    var base64Payload = btoa(jsonString);\n\n    // Construct the result object with both the encoded frm_payload and clear JSON\n    var result = {\n        contentType: \"JSON\",  // Specify the content type\n        data: {\n            frm_payload: base64Payload,  // The Base64 encoded payload\n            downlink_json_payload: detailedMessage  // The original detailed message in clear JSON\n        },\n        metadata: {\n            devId: 'eui-70b3d57ed006996d'  // Example static devId\n        }\n    };\n\n    // Return the result object\n    return result;",
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "e2e4ba40-5722-11ef-887e-effae2bd2f60"
    },
    "name" : "Downlink Data Converter TTN",
    "type" : "DOWNLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}